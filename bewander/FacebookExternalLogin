//Facebook external login was configured using the Facebook app dashboard for developers
//c# code below using MVC with Facebook external login (Facebook API and Javascript SDK)
// POST: /Account/ExternalLogin
        [HttpPost]
        [AllowAnonymous]
        [ValidateAntiForgeryToken]
        public ActionResult ExternalLogin(string provider, string returnUrl)
        {
            // Request a redirect to the external login provider
            return new ChallengeResult(provider, Url.Action("ExternalLoginCallback", "Account", new { ReturnUrl = returnUrl }));
        }

 // GET: /Account/ExternalLoginCallback
        [AllowAnonymous]
        public async Task<ActionResult> ExternalLoginCallback(string returnUrl)
        {
            var loginInfo = await AuthenticationManager.GetExternalLoginInfoAsync();
            if (loginInfo == null)
            {
                return RedirectToAction("Login");
            }
            
            // Sign in the user with this external login provider if the user already has a login
            var result = await SignInManager.ExternalSignInAsync(loginInfo, isPersistent: false);
            switch (result)
            {
                case SignInStatus.Success:
                    //return PartialView("_PolicyModalPartial");
                    return RedirectToLocal(returnUrl);
                case SignInStatus.LockedOut:
                    return View("Lockout");
                case SignInStatus.RequiresVerification:
                    return RedirectToAction("SendCode", new { ReturnUrl = returnUrl, RememberMe = false });
                case SignInStatus.Failure:
                default:
                    // If the user does not have an account, then prompt the user to create an account
                    ViewBag.ReturnUrl = returnUrl;
                    ViewBag.LoginProvider = loginInfo.Login.LoginProvider;
                    return View("ExternalLoginConfirmation", new ExternalLoginConfirmationViewModel { Email = loginInfo.Email });
            }
        }

        //
        // POST: /Account/ExternalLoginConfirmation
        [HttpPost]
        [AllowAnonymous]
        [ValidateAntiForgeryToken]
        public async Task<ActionResult> ExternalLoginConfirmation(ExternalLoginConfirmationViewModel model, string returnUrl)
        {
            if (User.Identity.IsAuthenticated)
            {
                return RedirectToAction("Index", "Manage");
            }

            if (ModelState.IsValid)
            {
                // Get the information about the user from the external login provider
                var info = await AuthenticationManager.GetExternalLoginInfoAsync();
                if (info == null)
                {
                    return View("ExternalLoginFailure");
                }
                var user = new ApplicationUser { UserName = model.Email, Email = model.Email };
                var result = await UserManager.CreateAsync(user, model.Password);
                if (result.Succeeded)
                {
                    
                     // Adds person registering to role user
                     IdentityResult roleUser = UserManager.AddToRole(user.Id, "User");

                     //Create new User
                     User newUser = new User(user.Id, model.FirstName, model.LastName);
                     db.Users.Add(newUser);


                     // Check and see if place exists in database///////////////////////
                     Place place = db.Places.Find(model.PlaceID);

                     if (place == null)
                     {
                         Place newPlace = new Place(model.PlaceID, model.PlaceName, model.Lat, model.Lng);
                         db.Places.Add(newPlace);
                     }

                     // Create new UserProfile              
                     UserProfile userProfile = new UserProfile { UserID = user.Id, DOB = model.DOB, HomeTown = model.PlaceID };
                     db.UserProfiles.Add(userProfile);

                     db.SaveChanges();

                     //  Comment the following line to prevent log in until the user is confirmed.
                     await SignInManager.SignInAsync(user, isPersistent: false, rememberBrowser: false);

                     // For more information on how to enable account confirmation and password reset please visit http://go.microsoft.com/fwlink/?LinkID=320771
                     // Send an email with this link
                     string code = await UserManager.GenerateEmailConfirmationTokenAsync(user.Id);
                     var callbackUrl = Url.Action("ConfirmEmail", "Account", new { userId = user.Id, code = code }, protocol: Request.Url.Scheme);
                     await UserManager.SendEmailAsync(user.Id, "Confirm your account", "Please confirm your Bewander.com account by clicking <a href=\"" + callbackUrl + "\">here</a>");
                     // Uncomment to debug locally without sending email-connect to  Views\Shared\Info.cshtml
                     // TempData["ViewBagLink"] = callbackUrl;
                     // require new users to have a confirmed email before they are logged in (authenticated).
                     ViewBag.Message = "Check your email and confirm your account, you must be confirmed "
                          + "before you can log in.";

                     return View("Info");



                     //result = await UserManager.AddLoginAsync(user.Id, info.Login);
                     //if (result.Succeeded)
                     //{
                     //    await SignInManager.SignInAsync(user, isPersistent: false, rememberBrowser: false);
                     //    //return PartialView("_PolicyModalPartial");
                     //    return RedirectToLocal(returnUrl);
                     //}
                     

                    result = await UserManager.AddLoginAsync(user.Id, info.Login);
                    if (result.Succeeded)
                    {
                        await SignInManager.SignInAsync(user, isPersistent: false, rememberBrowser: false);
                        return RedirectToLocal(returnUrl);
                    }

                }
                AddErrors(result);
            }

            ViewBag.ReturnUrl = returnUrl;
            return View(model);
        }
      
//Code snippets from the Login view (razor syntax)
@using Bewander.Models
@model CombinedLRViewModel

@Styles.Render("~/Content/font-awesome/css/fbLogin.css")

@{
    ViewBag.Title = "Log in";
}

@*Facebook login button*@
<div class="col-md-4">
    <section id="socialLoginForm">
        @Html.Partial("_ExternalLoginsListPartial", new ExternalLoginListViewModel { ReturnUrl = ViewBag.ReturnUrl })
    </section>
</div>
@*end Facebook login button*@
